{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ddiallo/Documents/Dev-Projets/React/REACT-POKEMONS-APP/src/components/pokemon-form.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport formatType from '../helpers/format-type';\nimport { useHistory } from 'react-router-dom';\nimport PokemonService from '../services/pokemon-service';\n\nconst PokemonForm = ({\n  pokemon\n}) => {\n  _s();\n\n  const types = ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n  const [form, setForm] = useState({\n    name: {\n      value: pokemon.name,\n      isValid: true\n    },\n    hp: {\n      value: pokemon.hp,\n      isValid: true\n    },\n    cp: {\n      value: pokemon.cp,\n      isValid: true\n    },\n    types: {\n      value: pokemon.types,\n      isValid: true\n    }\n  });\n\n  const hasType = type => {\n    return form.types.value.includes(type);\n  };\n\n  const history = useHistory();\n\n  const selectType = (type, e) => {\n    const checked = e.target.checked;\n    let newField;\n\n    if (checked) {\n      // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n      const newTypes = form.types.value.concat([type]);\n      newField = {\n        value: newTypes\n      };\n    } else {\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n      const newTypes = form.types.value.filter(currentType => currentType !== type);\n      newField = {\n        value: newTypes\n      };\n    }\n\n    setForm({ ...form,\n      ...{\n        types: newField\n      }\n    });\n  };\n\n  const handleInputChange = e => {\n    const fieldName = e.target.name;\n    const fieldValue = e.target.value;\n    const newField = {\n      [fieldName]: {\n        value: fieldValue\n      }\n    };\n    setForm({ ...form,\n      ...newField\n    });\n  };\n\n  const validateForm = () => {\n    let newForm = form; // Validator name\n\n    if (!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg = 'Le nom du pokémon est requis (1-25).';\n      const newField = {\n        value: form.name.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.name.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          name: newField\n        }\n      };\n    } // Validator hp\n\n\n    if (!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField = {\n        value: form.hp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.hp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          hp: newField\n        }\n      };\n    } // Validator cp\n\n\n    if (!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField = {\n        value: form.cp.value,\n        error: errorMsg,\n        isValid: false\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    } else {\n      const newField = {\n        value: form.cp.value,\n        error: '',\n        isValid: true\n      };\n      newForm = { ...newForm,\n        ...{\n          cp: newField\n        }\n      };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  };\n\n  const isTypesValid = type => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    } // Cas n°1: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n\n\n    if (form.types.value.length >= 3 && !hasType(type)) {\n      return false;\n    } // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n\n\n    return true;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n\n    if (isFormValid) {\n      pokemon.name = form.name.value;\n      pokemon.cp = form.cp.value;\n      pokemon.hp = form.hp.value;\n      pokemon.types = form.types.value;\n      PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col s12 m8 offset-m2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card hoverable\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-image\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: pokemon.picture,\n              alt: pokemon.name,\n              style: {\n                width: '250px',\n                margin: '0 auto'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-stacked\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"name\",\n                  children: \"Nom\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"name\",\n                  name: \"name\",\n                  type: \"text\",\n                  className: \"form-control\",\n                  value: form.name.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 152,\n                  columnNumber: 19\n                }, this), form.name.error && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-panel red accent-1\",\n                  children: form.name.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"hp\",\n                  children: \"Point de vie\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"hp\",\n                  name: \"hp\",\n                  type: \"number\",\n                  className: \"form-control\",\n                  value: form.hp.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 19\n                }, this), form.hp.error && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-panel red accent-1\",\n                  children: form.hp.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"cp\",\n                  children: \"D\\xE9g\\xE2ts\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  id: \"cp\",\n                  name: \"cp\",\n                  type: \"number\",\n                  className: \"form-control\",\n                  value: form.cp.value,\n                  onChange: e => handleInputChange(e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 19\n                }, this), form.cp.error && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-panel red accent-1\",\n                  children: form.cp.error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Types\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 19\n                }, this), types.map(type => /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    marginBottom: '10px'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      id: type,\n                      type: \"checkbox\",\n                      className: \"filled-in\",\n                      value: type,\n                      disabled: !isTypesValid(type),\n                      checked: hasType(type),\n                      onChange: e => selectType(type, e)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 185,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: formatType(type),\n                        children: type\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 187,\n                        columnNumber: 27\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 186,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 184,\n                    columnNumber: 23\n                  }, this)\n                }, type, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-action center\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"btn\",\n                children: \"Valider\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PokemonForm, \"rgAD6nKbN15nSuA92CqsoAaPim8=\", false, function () {\n  return [useHistory];\n});\n\n_c = PokemonForm;\nexport default PokemonForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PokemonForm\");","map":{"version":3,"sources":["/Users/ddiallo/Documents/Dev-Projets/React/REACT-POKEMONS-APP/src/components/pokemon-form.tsx"],"names":["React","useState","formatType","useHistory","PokemonService","PokemonForm","pokemon","types","form","setForm","name","value","isValid","hp","cp","hasType","type","includes","history","selectType","e","checked","target","newField","newTypes","concat","filter","currentType","handleInputChange","fieldName","fieldValue","validateForm","newForm","test","errorMsg","error","isTypesValid","length","handleSubmit","preventDefault","isFormValid","updatePokemon","then","push","id","picture","width","margin","map","marginBottom"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport { useHistory } from 'react-router-dom';\nimport PokemonService from '../services/pokemon-service';\n\ntype Props = {\n  pokemon: Pokemon\n};\n\ntype Field = {\n  value?: any\n  error?: String\n  isValid?: boolean\n}\n\ntype Form = {\n  name: Field\n  hp: Field\n  cp: Field\n  types: Field\n}\n\nconst PokemonForm: FunctionComponent<Props> = ({ pokemon }) => {\n\n  const types: string[] = [\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n  ];\n\n  const [form, setForm] = useState<Form>({\n    name: { value: pokemon.name, isValid: true },\n    hp: { value: pokemon.hp, isValid: true },\n    cp: { value: pokemon.cp, isValid: true },\n    types: { value: pokemon.types, isValid: true }\n  });\n\n  const hasType = (type: String): boolean => {\n    return form.types.value.includes(type);\n  }\n\n  const history = useHistory();\n\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n    const checked = e.target.checked;\n    let newField: Field;\n\n    if(checked) {\n      // Si l'utilisateur coche un type, à l'ajoute à la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.concat([type]);\n      newField = { value: newTypes };\n    } else {\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n      newField = { value: newTypes };\n    }\n\n    setForm({...form, ...{ types: newField }});\n  }\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const fieldName: string = e.target.name\n    const fieldValue: string = e.target.value\n    const newField: Field = {[fieldName]: {value: fieldValue}};\n    \n    setForm({...form, ...newField});\n  }\n\n  const validateForm = () => {\n    let newForm: Form = form;\n    \n    // Validator name\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n      newForm = { ...newForm, ...{ name: newField } };\n    } else {\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ name: newField } };\n    }\n\n    // Validator hp\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ hp: newField } };\n    } else {\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ hp: newField } };\n    }\n\n    // Validator cp\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n      newForm = { ...newForm, ...{ cp: newField } };\n    } else {\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\n      newForm = { ...newForm, ...{ cp: newField } };\n    }\n\n    setForm(newForm);\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n  }\n\n  const isTypesValid = (type: string): boolean => {\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\n    if (form.types.value.length === 1 && hasType(type)) {\n      return false;\n    }\n    \n    // Cas n°1: Le pokémon a au moins 3 types.\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\n    if (form.types.value.length >= 3 && !hasType(type)) { \n      return false; \n    } \n    \n    // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\n    return true;\n  }\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const isFormValid = validateForm();\n\n    if(isFormValid) {\n      pokemon.name = form.name.value;\n      pokemon.cp = form.cp.value;\n      pokemon.hp = form.hp.value;\n      pokemon.types = form.types.value;\n      PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n    }\n  }\n\n  \n\n  return (\n    <form onSubmit={e => handleSubmit(e)}>\n      <div className=\"row\">\n        <div className=\"col s12 m8 offset-m2\">\n          <div className=\"card hoverable\">\n            <div className=\"card-image\">\n              <img src={pokemon.picture} alt={pokemon.name} style={{ width: '250px', margin: '0 auto' }} />\n            </div>\n            <div className=\"card-stacked\">\n              <div className=\"card-content\">\n                {/* Pokemon name */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Nom</label>\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                  {form.name.error && \n                  <div className=\"card-panel red accent-1\">\n                    {form.name.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon hp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"hp\">Point de vie</label>\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.hp.error && \n                  <div className=\"card-panel red accent-1\">\n                    {form.hp.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon cp */}\n                <div className=\"form-group\">\n                  <label htmlFor=\"cp\">Dégâts</label>\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                  {form.cp.error && \n                  <div className=\"card-panel red accent-1\">\n                    {form.cp.error}\n                  </div>\n                  }\n                </div>\n                {/* Pokemon types */}\n                <div className=\"form-group\">\n                  <label>Types</label>\n                  {types.map(type => (\n                    <div key={type} style={{ marginBottom: '10px' }}>\n                      <label>\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                        <span>\n                          <p className={formatType(type)}>{type}</p>\n                        </span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              <div className=\"card-action center\">\n                {/* Submit button */}\n                <button type=\"submit\" className=\"btn\">Valider</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default PokemonForm;"]},"metadata":{},"sourceType":"module"}